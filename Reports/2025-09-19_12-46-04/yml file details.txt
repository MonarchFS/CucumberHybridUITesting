name: Java CI - Selenium Cucumber Framework

on:
  push:
    branches: [ data-driven-version ]     # Trigger workflow on push events to this branch
  pull_request:
    branches: [ data-driven-version ]     # Trigger workflow on PRs targeting this branch

jobs:
  build:
    runs-on: ubuntu-latest                # Use the latest Ubuntu runner environment

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3         # Checkout the code from the repository so workflow can access it

      - name: Set up JDK 17
        uses: actions/setup-java@v3       # Setup Java Development Kit version 17
        with:
          java-version: '17'
          distribution: 'temurin'          # Use the Temurin JDK distribution

      - name: Cache Maven dependencies
        uses: actions/cache@v3             # Cache Maven's local repository to speed up builds
        with:
          path: ~/.m2                      # Path to Maven local repo
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}  # Cache key based on OS and pom.xml checksum
          restore-keys: |
            ${{ runner.os }}-maven         # Fallback cache keys

      - name: Build the project
        run: mvn clean compile             # Clean previous builds and compile the project source code

      - name: Run Cucumber Tests and save logs
        run: mvn test 2>&1 | tee test-run.log
        # Run the tests with Maven.
        # Save full console output (stdout + stderr) to 'test-run.log' for later processing.

      - name: Upload Cucumber Reports
        if: always()                      # Run this step even if previous steps fail
        uses: actions/upload-artifact@v4  # Upload cucumber reports as build artifacts for downloading/viewing
        with:
          name: cucumber-html-report
          path: cucumber-reports/          # Path to cucumber HTML report folder generated by tests

      - name: Extract Cucumber Cloud Report URL
        id: extract_report_url            # Step ID to reference outputs in later steps
        run: |
          echo "Searching for report URL in test-run.log..."
          cat test-run.log | grep 'https://reports.cucumber.io' || echo "No report link found in log"
          # Search the test log for the Cucumber Cloud report URL pattern

          REPORT_URL=$(grep -oP 'https://reports.cucumber.io/reports/[a-z0-9-]+' test-run.log | head -1)
          # Extract the first matching URL from the log

          echo "Extracted report URL: $REPORT_URL"
          echo "REPORT_URL=$REPORT_URL" >> $GITHUB_OUTPUT
          # Export the extracted URL as an output variable for use in subsequent steps

      - name: Debug - Print Extracted URL
        run: | 
          echo "URL passed to next step: ${{ steps.extract_report_url.outputs.REPORT_URL }}"
          # Print the extracted report URL to the workflow log for debugging purposes

      - name: Push reports and update report URL in public repo
        env:
          TARGET_REPO: "https://github.com/MonarchFS/CucumberHybridUITesting.git"  # Public repo to push reports
          TARGET_REPO_PAT: ${{ secrets.TARGET_REPO_PAT }}                         # Personal Access Token stored in secrets
          TARGET_BRANCH: "main"                                                    # Branch in the public repo to push to
          REPORT_SOURCE_DIR: "cucumber-reports"                                   # Source directory with reports in current repo
          REPORT_DEST_DIR: "Reports"                                              # Destination folder in the public repo
          REPORT_URL: ${{ steps.extract_report_url.outputs.REPORT_URL }}          # Extracted Cucumber Cloud URL

        run: |
          echo "Cloning target repo"
          git clone https://x-access-token:${TARGET_REPO_PAT}@github.com/MonarchFS/CucumberHybridUITesting.git
          # Clone the public reports repo using the PAT for authentication

          cd CucumberHybridUITesting
          git checkout ${TARGET_BRANCH}
          # Switch to the target branch

          TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
          mkdir -p ${REPORT_DEST_DIR}/${TIMESTAMP}
          cp -r ../${REPORT_SOURCE_DIR}/* ${REPORT_DEST_DIR}/${TIMESTAMP}/
          # Create a timestamped folder inside Reports/ and copy the latest cucumber reports into it

          # Update latest-report-link.md inside Reports/ with the Cucumber Cloud report URL if present
          if [ -n "$REPORT_URL" ]; then
            mkdir -p ${REPORT_DEST_DIR}
            echo "## Latest Cucumber Cloud Report" > ${REPORT_DEST_DIR}/latest-report-link.md
            echo "You can view the latest Cucumber Cloud report here:" >> ${REPORT_DEST_DIR}/latest-report-link.md
            echo "[${REPORT_URL}](${REPORT_URL})" >> ${REPORT_DEST_DIR}/latest-report-link.md
            # Write a markdown file with a clickable link to the latest Cucumber Cloud report
          else
            echo "No Cucumber Cloud report URL found, skipping link update."
          fi

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Configure Git user info for committing

          git add ${REPORT_DEST_DIR}
          git commit -m "Update Cucumber reports and latest report link on $(date +'%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
          # Commit the new reports and/or link markdown file; ignore if no changes

          git push origin ${TARGET_BRANCH}
          # Push changes back to the public repo on the target branch
